import disnake, json
from disnake.ext import commands, tasks
import os, sys, asyncio, aiohttp, time, datetime, random, requests, platform, pyautogui, aeval


json_data = json.load(open("settings.json", "r"))

bot = commands.Bot(command_prefix=json_data["prefix"], case_insensitive=False, strip_after_prefix=True, intents=disnake.Intents.all())

async def clean_code(content):
    if content.startswith("```") and content.endswith("```"):
        return "\n".join(content.split("\n")[1:])[:-3]
    else:
        return content
minify_text = lambda txt: f'{str(txt)[:900]}...\n...–∏ –µ—â—ë {len(str(txt).replace(str(txt)[900:], ""))} —Å–∏–º–≤–æ–ª–æ–≤...' if len(str(txt)) >= 1024 else str(txt)
super_minify_text = lambda txt: f'{str(txt)[:132]}...\n...–∏ –µ—â—ë {len(str(txt).replace(str(txt)[132:], ""))} —Å–∏–º–≤–æ–ª–æ–≤...' if len(str(txt)) >= 256 else str(txt)
creators = [555638466365489172, 529302484901036043]

@bot.event
async def on_ready():
    print("Ready!")

@bot.slash_command(name="ping", description="Shows ping of the bot.", guild_ids=[g.id for g in bot.guilds])
async def ping(interaction):
    await interaction.send(f"Pong in {round(bot.latency * 1000)} ms!")

@bot.slash_command(name="idea", description="Send an idea for bot")
async def idea(interaction, idea: str = commands.Param(
    name = 'Idea', description ="Text of your idea"
)):
    # class MyModal(disnake.ui.Modal):
    #     def __init__(selfi) -> None:
    #         super().__init__(title="–ò–¥–µ—è",
    #             custom_id="idea_modal",
    #             components=[
    #                 disnake.ui.TextInput(
    #                     label="–¢–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
    #                     placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –∏–¥–µ—é (–º–∞–∫—Å. 1024 —Å–∏–º–≤–æ–ª–∞)",
    #                     custom_id="idea_content",
    #                     style=disnake.TextInputStyle.paragraph,
    #                     min_length=5,
    #                     max_length=1024,
    #                 ),
    #             ]
    #         )
    #     async def callback(selfi, interaction:disnake.ModalInteraction) -> None:
    #         await interaction.response.send_message(embed=disnake.Embed(title="–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à—É –∏–¥–µ—é!", description=interaction.text_values["idea_content"]))
    #         msg = await bot.get_channel(954016631430991942).send(embed=disnake.Embed(title=f"–ò–¥–µ—è –æ—Ç {interaction.author} ({interaction.author.id})", description=interaction.text_values["idea_content"]))
    #         await msg.create_thread(name = "–û–±—Å—É–∂–¥–µ–Ω–∏–µ")
    #         await msg.add_reaction("üëç")
    #         await msg.add_reaction("üëé")

    #     async def on_error(selfi, error, inter) -> None:
    #         await inter.response.send_message("–£–ø—Å... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...", ephemeral=True)

    # await interaction.response.send_modal(MyModal())
    await interaction.response.send_message(embed=disnake.Embed(title="–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à—É –∏–¥–µ—é!", description=idea))
    msg = await bot.get_channel(954016631430991942).send(embed=disnake.Embed(title=f"–ò–¥–µ—è –æ—Ç {interaction.author} ({interaction.author.id})", description=idea))
    await msg.create_thread(name = "–û–±—Å—É–∂–¥–µ–Ω–∏–µ")
    await msg.add_reaction("üëç")
    await msg.add_reaction("üëé")

# –º–Ω–µ –ø–∏–∑–¥–µ—Ü –ª–µ–Ω—å –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å –ø–æ–¥ —Å–ª–µ—à–∏
@bot.command()
async def logout(ctx, timerout: int = None):
    if ctx.author.id in creators:
        if timerout is None:
            await ctx.send('–û—Ç–∫–ª—é—á–∞—é—Å—å')
            print('–û—Ç–∫–ª—é—á–µ–Ω–∏–µ...')
            await bot.close()
            print('–û—Ç–∫–ª—é—á–µ–Ω–æ')
        else:
            await ctx.send(f'–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Discord —á–µ—Ä–µ–∑ {timerout} —Å–µ–∫—É–Ω–¥')
            await asyncio.sleep(timerout)
            print('–û—Ç–∫–ª—é—á–µ–Ω–∏–µ...')
            await bot.close()
            print('–û—Ç–∫–ª—é—á–µ–Ω–æ')
    else:
        await ctx.send("–ù–µ—Ç! –¢–µ–±–µ –Ω–µ–ª—å–∑—è –º–µ–Ω—è –≤—ã–∫–ª—é—á–∏—Ç—å!")
@bot.command()
async def restart(ctx, timerout: int = None):
    if ctx.author.id in creators:
        if timerout is None:
            await ctx.send('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫!')
            os.execl(sys.executable, sys.executable, *sys.argv)
        else:
            await ctx.send(f'–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Discord —á–µ—Ä–µ–∑ {timerout} —Å–µ–∫—É–Ω–¥')
            await asyncio.sleep(timerout)
            await ctx.send('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫!')
            os.execl(sys.executable, sys.executable, *sys.argv)
    else:
        await ctx.send("–ù–µ—Ç! –¢–µ–±–µ –Ω–µ–ª—å–∑—è –º–µ–Ω—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å!")
@bot.command(aliases = ['eval', 'aeval', 'evaulate', '–≤—ã–ø–æ–ª–Ω–∏—Ç—å', 'exec', 'execute'])
async def __eval(ctx, *, arg):
    if ctx.author.id not in creators: return await ctx.send("–ö—ã—à!")
    code = await clean_code(arg)
    standart_args = {
        "disnake": disnake,
        "discord": disnake,
        "commands": commands,
        "bot": bot,
        "tasks": tasks,
        "ctx": ctx,
        "asyncio": asyncio,
        "aiohttp": aiohttp,
        "os": os,
        'sys': sys,
        "time": time,
        "datetime": datetime,
        "random": random,
        "requests": requests,
        "pyautogui": pyautogui,
        'platform': platform,
        # 'logger': bot.logger
    }
    start = time.time()
    try:
        bot.logger.info(f'Invoked command "eval"')
        r = await aeval.aeval(f"""{code}""", standart_args, {})#aioconsole.aexec(f"""{code}""", standart_args)
        ended = time.time() - start
        print(r)
        if not code.startswith('#nooutput'):
            await ctx.send(embed = disnake.Embed(title = "–£—Å–ø–µ—à–Ω–æ!", description = f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞: {ended}", color = 0x99ff99).add_field(name = f'–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', value = f'`{minify_text(code)}`').add_field(name = f'–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', value = f'`{minify_text(r)}`', inline=False))
        bot.logger.success(f'Command "eval" executed in {ended}')
    except Exception as e:
        ended = time.time() - start
        # await ctx.send(embed = discord.Embed(title = f"–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –í—Ä–µ–º—è: {ended}", description = f'–û—à–∏–±–∫–∞:\n```py\n{"".join(format_exception(e, e, e.__traceback__))}```', color = 0xff000))
        if not code.startswith('#nooutput'):
            await ctx.send(embed = disnake.Embed(title = f"–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.\n–í—Ä–µ–º—è: {ended}", description = f'–û—à–∏–±–∫–∞:\n```py\n{e}```', color = 0xff0000).add_field(name = f'–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', value = f'`{minify_text(code)}`', inline=False))
        bot.logger.error(f'Command "eval" execution failed in {ended}:\n\t\tPython error: {e}')
        raise e

bot.run(json_data["token"])