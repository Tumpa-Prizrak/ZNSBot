import nextcord, json, aeval, asyncio, aiohttp, os, sys, time, datetime, random, requests, pyautogui, platform, anekos, blusutils, nekos
from nextcord.ext import commands

json_data = json.load(open("settings.json", "r"))
bot = commands.Bot(command_prefix=json_data["prefix"], case_sensitive=True, strip_after_prefix=True, intents=nextcord.Intents.all())

minify_text = lambda txt: f'{str(txt)[:900]}...\n...–∏ –µ—â—ë {len(str(txt).replace(str(txt)[900:], ""))} —Å–∏–º–≤–æ–ª–æ–≤...' if len(str(txt)) >= 1024 else str(txt)
super_minify_text = lambda txt: f'{str(txt)[:132]}...\n...–∏ –µ—â—ë {len(str(txt).replace(str(txt)[132:], ""))} —Å–∏–º–≤–æ–ª–æ–≤...' if len(str(txt)) >= 256 else str(txt)
async def clean_code(content):
    if content.startswith("```") and content.endswith("```"):
        return "\n".join(content.split("\n")[1:])[:-3]
    else:
        return content

@bot.event
async def on_ready():
    print("Ready!")

@bot.slash_command(name="ping", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∏–Ω–≥ –±–æ—Ç–∞.", guild_ids=[g.id for g in bot.guilds])
async def ping(interaction: nextcord.Interaction):
    await interaction.send(f"Pong in {round(bot.latency * 1000)} ms!")

@bot.slash_command(name="idea", description="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–¥–µ—é –¥–ª—è –±–æ—Ç–∞.")
async def idea(interaction: nextcord.Interaction, idea_text: str = nextcord.SlashOption(name="text", description="–í–∞—à–∞ –∏–¥–µ—è")):
    try:
        msg = await bot.get_channel(json_data["idea_channel"]).send(embed=nextcord.Embed(title=f"–ò–¥–µ—è –æ—Ç {interaction.user} ({interaction.user.id})", description=idea_text))
        await msg.create_thread(name = "–û–±—Å—É–∂–¥–µ–Ω–∏–µ")
        await msg.add_reaction("üëç")
        await msg.add_reaction("üëé")
        await interaction.response.send_message(embed=nextcord.Embed(title="–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à—É –∏–¥–µ—é!", description="–¢–µ–∫—Å—Ç –≤–∞—à–µ–π –∏–¥–µ–∏: " + idea_text))
    except Exception as e:
        await interaction.response.send_message(embed=nextcord.Embed(title="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", description="–û—à–∏–±–∫–∞: " + str(e)))
        raise e


# –±–ª—ç–∫–ª–∏—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±—É–¥–µ—Ç –ø–æ–∑–∂–µ, –∞ –ø–æ–∫–∞ –±—É–¥–µ—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Ñ—É—Ç–∞–Ω–∞—Ä–∏ –∏ —Ç—Ä–∞–ø–æ–≤ :)
@bot.slash_command(name="nekos", description="–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ Nekos (18+ –¥–æ–ø—É—Å—Ç–∏–º–æ —Ç–æ–ª—å–∫–æ –≤ NSFW-–∫–∞–Ω–∞–ª–∞—Ö)")
async def nekos_(interaction: nextcord.Interaction, category: str = nextcord.SlashOption(name = "text", description = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏", required=False)):
    if category is not None:
        if category not in anekos.possible:
            await interaction.send(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ `{category}` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –Ø –æ—Ç–ø—Ä–∞–≤–ª—é —Å–ø–∏—Å–æ–∫ —Ç–µ–±–µ –≤ –õ–°")
            await interaction.user.send(embed = nextcord.Embed(title = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ Nekos", description = ", ".join(anekos.everywhere)+(", "+", ".join(anekos.nsfw) if interaction.channel.is_nsfw() else "")))
        if category in anekos.nsfw and not interaction.channel.is_nsfw():
            return await interaction.send("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π —Å NSFW-–∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –≤–Ω–µ NSFW-–∫–∞–Ω–∞–ª–∞")
    else:
        category = random.choice(anekos.nsfw if interaction.channel.is_nsfw() else anekos.everywhere)
    img = nekos.img(category)
    await interaction.send(embed = nextcord.Embed(title = f'Nekos {category.capitalize()}', url = img).set_image(url = img))

            

# @bot.command(aliases = ['eval', 'aeval', 'evaulate', '–≤—ã–ø–æ–ª–Ω–∏—Ç—å', 'exec', 'execute'])
# async def __eval(ctx, *, arg):
#     if ctx.author.id not in json_data["creators"]: return await ctx.send("–ö—ã—à!")
#     code = await clean_code(arg)
#     standart_args = {
#         "nextcord": nextcord,
#         "discord": nextcord,
#         "commands": commands,
#         "bot": bot,
#         "ctx": ctx,
#         "asyncio": asyncio,
#         "aiohttp": aiohttp,
#         "os": os,
#         'sys': sys,
#         "time": time,
#         "datetime": datetime,
#         "random": random,
#         "requests": requests,
#         "pyautogui": pyautogui,
#         'platform': platform
#     }
#     start = time.time()
#     try:
#         r = await aeval.aeval(f"""{code}""", standart_args, {})#aioconsole.aexec(f"""{code}""", standart_args)
#         ended = time.time() - start
#         print(r)
#         if not code.startswith('#nooutput'):
#             await ctx.send(embed = nextcord.Embed(title = "–£—Å–ø–µ—à–Ω–æ!", description = f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞: {ended}", color = 0x99ff99).add_field(name = f'–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', value = f'`{minify_text(code)}`').add_field(name = f'–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', value = f'`{minify_text(r)}`', inline=False))
#     except Exception as e:
#         ended = time.time() - start
#         # await ctx.send(embed = discord.Embed(title = f"–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –í—Ä–µ–º—è: {ended}", description = f'–û—à–∏–±–∫–∞:\n```py\n{"".join(format_exception(e, e, e.__traceback__))}```', color = 0xff000))
#         if not code.startswith('#nooutput'):
#             await ctx.send(embed = nextcord.Embed(title = f"–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.\n–í—Ä–µ–º—è: {ended}", description = f'–û—à–∏–±–∫–∞:\n```py\n{e}```', color = 0xff0000).add_field(name = f'–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', value = f'`{minify_text(code)}`', inline=False))
#         raise e

bot.run(json_data["token"])